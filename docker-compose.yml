version: '3.8'

services:
  pg_yellow:
    image: postgres:16
    user: postgres
    restart: unless-stopped
    container_name: pg_yellow
    ports:
      - ${DB_YELLOW_PORT}:${DB_YELLOW_PORT}
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    volumes:
      - pgdata-yellow:/var/lib/postgresql/data
      - ./sql-scripts/00_init.sql:/docker-entrypoint-initdb.d/00_init.sql
  
  pg_purple:
    image: postgres:16
    user: postgres
    restart: unless-stopped
    container_name: pg_purple
    ports:
      - ${DB_PURPLE_PORT}:${DB_PURPLE_PORT}
    environment:
      POSTGRES_DB: ${DB_NAME}
      PGUSER: replicator
      PGPASSWORD: replicator_password
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=pg_yellow --port=${DB_YELLOW_PORT}
      do
      echo 'Waiting for master to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres -p ${DB_PURPLE_PORT}
      "
    depends_on:
      - pg_yellow
  
  redis:
    container_name: redis_social
    image: "redis:7.2.4"
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
  
  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - "kafka"
  kafka:
    container_name: kafka
    image: obsidiandynamics/kafka
    restart: "no"
    ports:
      - "2181:2181"
      - ${KAFKA_PORT}:${KAFKA_PORT}
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:${KAFKA_PORT}"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://kafka:${KAFKA_PORT}"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
  
  backend:
    container_name: api_nest_1
    build:
      context: ./backend
    depends_on:
      - pg_yellow
      - pg_purple
      - redis
      - kafdrop
      - kafka
    restart: unless-stopped
    ports:
      - ${API_PORT}:${API_PORT}
    environment:
      API_PORT: ${API_PORT}
      JWT_SECRET: ${JWT_SECRET}
      DB_YELLOW_HOST: pg_yellow
      DB_YELLOW_PORT: ${DB_YELLOW_PORT}
      DB_PURPLE_HOST: pg_purple
      DB_PURPLE_PORT: ${DB_PURPLE_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      KAFKA_HOST: kafka
      KAFKA_PORT: ${KAFKA_PORT}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}

  feed-ws:
    container_name: feed-ws
    build:
      context: ./feed-ws
    depends_on:
      - pg_yellow
      - pg_purple
      - redis
      - kafdrop
      - kafka
    restart: unless-stopped
    ports:
      - ${WS_PORT}:${WS_PORT}
    environment:
      DB_YELLOW_HOST: pg_yellow
      DB_YELLOW_PORT: ${DB_YELLOW_PORT}
      DB_PURPLE_HOST: pg_purple
      DB_PURPLE_PORT: ${DB_PURPLE_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      KAFKA_HOST: kafka
      KAFKA_PORT: ${KAFKA_PORT}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}

volumes:
  pgdata-yellow: