version: '3.8'

services:

  master:
    container_name: "${COMPOSE_PROJECT_NAME:-citus}_master"
    image: "citusdata/citus:12.1.2"
    ports:
      - ${DB_YELLOW_PORT}:${DB_YELLOW_PORT}
    labels: ["com.citusdata.role=Master"]
    environment: &AUTH
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: "${DB_USER:-postgres}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      PGUSER: "${DB_USER:-postgres}"
      PGPASSWORD: "${DB_PASSWORD}"
      POSTGRES_HOST_AUTH_METHOD: "${POSTGRES_HOST_AUTH_METHOD:-trust}"
    volumes:
      - pgdata-yellow:/var/lib/postgresql/data

  citus_worker:
    image: "citusdata/citus:12.1.2"
    labels: ["com.citusdata.role=Worker"]
    depends_on: [citus_manager]
    environment: *AUTH
    command: "/wait-for-manager.sh"
    volumes:
      - pgdata-worker-yellow:/var/lib/postgresql/data
      - healthcheck-volume:/healthcheck

  citus_manager:
    container_name: "${COMPOSE_PROJECT_NAME:-citus}_manager"
    image: "citusdata/membership-manager:0.3.0"
    volumes:
      - "${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock"
      - healthcheck-volume:/healthcheck
    depends_on: [master]
    environment: *AUTH
  
  redis:
    container_name: redis_social
    image: "redis:7.2.4"
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
  
  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - "kafka"
  kafka:
    container_name: kafka
    image: obsidiandynamics/kafka
    restart: "no"
    ports:
      - "2181:2181"
      - ${KAFKA_PORT}:${KAFKA_PORT}
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:${KAFKA_PORT}"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://kafka:${KAFKA_PORT}"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
  
  backend:
    container_name: api_nest_1
    build:
      context: ./backend
    depends_on:
      - master
      - redis
      - kafdrop
      - kafka
    restart: unless-stopped
    ports:
      - ${API_PORT}:${API_PORT}
    environment:
      API_PORT: ${API_PORT}
      JWT_SECRET: ${JWT_SECRET}
      DB_YELLOW_HOST: master
      DB_YELLOW_PORT: ${DB_YELLOW_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      KAFKA_HOST: kafka
      KAFKA_PORT: ${KAFKA_PORT}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
  
  dialog:
    container_name: dialog
    build:
      context: ./dialog
    depends_on:
      - master
      - kafdrop
      - kafka
    restart: unless-stopped
    environment:
      DB_YELLOW_HOST: master
      DB_YELLOW_PORT: ${DB_YELLOW_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      KAFKA_HOST: kafka
      KAFKA_PORT: ${KAFKA_PORT}

  feed-ws:
    container_name: feed-ws
    build:
      context: ./feed-ws
    depends_on:
      - master
      - redis
      - kafdrop
      - kafka
    restart: unless-stopped
    ports:
      - ${WS_PORT}:${WS_PORT}
    environment:
      DB_YELLOW_HOST: master
      DB_YELLOW_PORT: ${DB_YELLOW_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      KAFKA_HOST: kafka
      KAFKA_PORT: ${KAFKA_PORT}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}

volumes:
  pgdata-yellow:
  pgdata-worker-yellow:
  healthcheck-volume: